From 43fc3eff044e64ff49ebfc53121c9852c6dc3b30 Mon Sep 17 00:00:00 2001
From: Boris Faure <billiob@gmail.com>
Date: Wed, 6 Aug 2014 22:22:03 +0200
Subject: blend in app_server_eet.{c,h}


diff --git a/src/bin/app_server_eet.c b/src/bin/app_server_eet.c
index 0339741..ef6d0c7 100644
--- a/src/bin/app_server_eet.c
+++ b/src/bin/app_server_eet.c
@@ -1,6 +1,3 @@
-/* This file has been automatically generated by geneet.py */
-/*                      DO NOT MODIFY                      */
-
 #include <limits.h>
 #include <stdio.h>
 #include <sys/stat.h>
@@ -26,7 +23,7 @@ static const char TERMINOLOGY_ITEM_ENTRY[] = "terminology_item";
 static Eet_Data_Descriptor *_term_item_descriptor = NULL;
 static Eet_Data_Descriptor *_terminology_item_descriptor = NULL;
 
-static inline void
+static void
 _term_item_init(void)
 {
     Eet_Data_Descriptor_Class eddc;
@@ -40,7 +37,7 @@ _term_item_init(void)
     EET_DATA_DESCRIPTOR_ADD_BASIC(_term_item_descriptor, Term_Item, "dir", dir, EET_T_STRING);
 }
 
-static inline void
+static void
 _term_item_shutdown(void)
 {
     if (!_term_item_descriptor) return;
@@ -73,26 +70,26 @@ term_item_free(Term_Item *term_item)
     free(term_item);
 }
 
-inline const char *
+const char *
 term_item_id_get(const Term_Item *term_item)
 {
     return term_item->id;
 }
 
-inline void
+void
 term_item_id_set(Term_Item *term_item, const char *id)
 {
     EINA_SAFETY_ON_NULL_RETURN(term_item);
     eina_stringshare_replace(&(term_item->id), id);
 }
 
-inline const char *
+const char *
 term_item_dir_get(const Term_Item *term_item)
 {
     return term_item->dir;
 }
 
-inline void
+void
 term_item_dir_set(Term_Item *term_item, const char *dir)
 {
     EINA_SAFETY_ON_NULL_RETURN(term_item);
@@ -100,7 +97,7 @@ term_item_dir_set(Term_Item *term_item, const char *dir)
 }
 
 
-static inline void
+static void
 _terminology_item_init(void)
 {
     Eet_Data_Descriptor_Class eddc;
@@ -114,7 +111,7 @@ _terminology_item_init(void)
     EET_DATA_DESCRIPTOR_ADD_HASH(_terminology_item_descriptor, Terminology_Item, "term_entries", term_entries, _term_item_descriptor);
 }
 
-static inline void
+static void
 _terminology_item_shutdown(void)
 {
     if (!_terminology_item_descriptor) return;
@@ -146,13 +143,13 @@ terminology_item_free(Terminology_Item *terminology_item)
     free(terminology_item);
 }
 
-inline unsigned int
+unsigned int
 terminology_item_version_get(const Terminology_Item *terminology_item)
 {
     return terminology_item->version;
 }
 
-inline void
+void
 terminology_item_version_set(Terminology_Item *terminology_item, unsigned int version)
 {
     EINA_SAFETY_ON_NULL_RETURN(terminology_item);
@@ -173,14 +170,14 @@ terminology_item_term_entries_del(Terminology_Item *terminology_item, const char
     eina_hash_del(terminology_item->term_entries, id, NULL);
 }
 
-inline Term_Item *
+Term_Item *
 terminology_item_term_entries_get(const Terminology_Item *terminology_item, const char * id)
 {
     EINA_SAFETY_ON_NULL_RETURN_VAL(terminology_item, NULL);
     return eina_hash_find(terminology_item->term_entries, id);
 }
 
-inline Eina_Hash *
+Eina_Hash *
 terminology_item_term_entries_hash_get(const Terminology_Item *terminology_item)
 {
     EINA_SAFETY_ON_NULL_RETURN_VAL(terminology_item, NULL);
diff --git a/src/bin/app_server_eet.h b/src/bin/app_server_eet.h
index 3809caa..968871a 100644
--- a/src/bin/app_server_eet.h
+++ b/src/bin/app_server_eet.h
@@ -1,8 +1,5 @@
-/* This file has been automatically generated by geneet.py */
-/*                      DO NOT MODIFY                      */
-
-#ifndef __TERMINOLOGY_EET_H__
-#define __TERMINOLOGY_EET_H__
+#ifndef _APP_SERVER_EET_H__
+#define _APP_SERVER_EET_H__ 1
 
 #include <Eina.h>
 #include <Eet.h>
@@ -38,4 +35,4 @@ Eina_Bool terminology_item_save(Terminology_Item *terminology_item, const char *
 void app_server_eet_init(void);
 void app_server_eet_shutdown(void);
 
-#endif /* __TERMINOLOGY_EET_H__ */
+#endif /* _APP_SERVER_EET_H__ */
-- 
cgit v0.10.1

